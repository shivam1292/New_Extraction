# -*- coding: utf-8 -*-
"""Another copy of Akaike Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GM24dt8LYF4ru5DmBitkeExFwnXWbYj
"""

# !pip uninstall googletrans -y
# !pip install googletrans==4.0.0-rc1

import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
from googletrans import Translator
from gtts import gTTS
import os
import json
from collections import Counter
import streamlit as st

# Step 1: Fetch News from Yahoo
def get_yahoo_news(company, max_articles=10):
    """Fetches news articles from Yahoo News for a given company."""
    search_url = f'https://news.search.yahoo.com/search?p={company}'
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(search_url, headers=headers)

    if response.status_code != 200:
        return []  # Avoid crashing

    soup = BeautifulSoup(response.text, 'html.parser')
    articles = []

    for item in soup.find_all('div', class_='NewsArticle', limit=max_articles):
        title_tag = item.find('h4')
        summary_tag = item.find('p')

        if title_tag and summary_tag:
            articles.append({
                'Title': title_tag.text.strip(),
                'Summary': summary_tag.text.strip(),
            })

    return articles

# Step 2: Perform Sentiment Analysis
def analyze_sentiment(text):
    polarity = TextBlob(text).sentiment.polarity
    return "Positive" if polarity > 0.05 else "Negative" if polarity < -0.05 else "Neutral"

# Step 3: Comparative Sentiment Analysis
def comparative_sentiment_analysis(news_articles):
    sentiment_results = [analyze_sentiment(article["Summary"]) for article in news_articles]
    sentiment_counts = Counter(sentiment_results)

    return {
        "Sentiment Distribution": sentiment_counts,
        "Coverage Differences": [
            {
                "Comparison": "Some articles are positive while others discuss challenges.",
                "Impact": "Positive news boosts investor confidence, while negative news may cause concerns."
            }
        ]
    }

# Step 4: Translate Text to Hindi
def translate_to_hindi(text):
    translator = Translator()
    return translator.translate(text, src="en", dest="hi").text

# Step 5: Convert Hindi Text to Speech
def text_to_speech_hindi(text, filename="news_audio.mp3"):
    tts = gTTS(text=text, lang="hi")
    tts.save(filename)
    return filename

# ðŸš€ **Main Execution (Single Input)**
company_name = input("Enter the company name: ")
print("\nFetching News, Performing Sentiment Analysis, Translating to Hindi, and Generating Speech...\n")

news_articles = get_yahoo_news(company_name)

# Process each article (Sentiment Analysis + Translation)
hindi_summaries = []
for article in news_articles:
    article["Sentiment"] = analyze_sentiment(article["Summary"])
    hindi_summary = translate_to_hindi(article["Summary"])
    hindi_summaries.append(hindi_summary)

# Perform Comparative Sentiment Analysis
comparative_results = comparative_sentiment_analysis(news_articles)

# Convert all summaries into Hindi speech
speech_text = " ".join(hindi_summaries)
speech_file = text_to_speech_hindi(speech_text)

# Final JSON Output
final_output = {
    "Company": company_name,
    "Articles": news_articles,
    "Comparative Sentiment Score": comparative_results,
    "Final Sentiment Analysis": "Overall, the news coverage is mixed.",
    "Audio": speech_file
}

# Print JSON Output
print("\nâœ… JSON Output:")
print(json.dumps(final_output, indent=4, ensure_ascii=False))

# Play Hindi Speech
print("\nðŸŽ™ Playing Hindi Speech...")
st.audio(speech_file, autoplay=True)
